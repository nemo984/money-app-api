// Code generated by sqlc. DO NOT EDIT.
// source: budget.sql

package db

import (
	"context"
	"database/sql"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (
  category_id, amount, end_date, user_id
) VALUES (
  $2, $3, $4, $1
)
RETURNING budget_id, category_id, amount, start_date, end_date, user_id
`

type CreateBudgetParams struct {
	UserID     int32        `json:"user_id"`
	CategoryID int32        `json:"category_id"`
	Amount     string       `json:"amount"`
	EndDate    sql.NullTime `json:"end_date"`
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRowContext(ctx, createBudget,
		arg.UserID,
		arg.CategoryID,
		arg.Amount,
		arg.EndDate,
	)
	var i Budget
	err := row.Scan(
		&i.BudgetID,
		&i.CategoryID,
		&i.Amount,
		&i.StartDate,
		&i.EndDate,
		&i.UserID,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
DELETE FROM budgets
WHERE budget_id = $1
`

func (q *Queries) DeleteBudget(ctx context.Context, budgetID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBudget, budgetID)
	return err
}

const getBudget = `-- name: GetBudget :one
SELECT budget_id, category_id, amount, start_date, end_date, user_id FROM budgets
WHERE budget_id = $1
`

func (q *Queries) GetBudget(ctx context.Context, budgetID int32) (Budget, error) {
	row := q.db.QueryRowContext(ctx, getBudget, budgetID)
	var i Budget
	err := row.Scan(
		&i.BudgetID,
		&i.CategoryID,
		&i.Amount,
		&i.StartDate,
		&i.EndDate,
		&i.UserID,
	)
	return i, err
}

const getBudgets = `-- name: GetBudgets :many
SELECT budget_id, category_id, amount, start_date, end_date, user_id FROM budgets
WHERE user_id = $1
`

func (q *Queries) GetBudgets(ctx context.Context, userID int32) ([]Budget, error) {
	rows, err := q.db.QueryContext(ctx, getBudgets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Budget{}
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.BudgetID,
			&i.CategoryID,
			&i.Amount,
			&i.StartDate,
			&i.EndDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBudget = `-- name: UpdateBudget :exec
UPDATE budgets
SET category_id = $2,
    amount = $3,
    end_date = $4
WHERE user_id = $1
`

type UpdateBudgetParams struct {
	UserID     int32        `json:"user_id"`
	CategoryID int32        `json:"category_id"`
	Amount     string       `json:"amount"`
	EndDate    sql.NullTime `json:"end_date"`
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) error {
	_, err := q.db.ExecContext(ctx, updateBudget,
		arg.UserID,
		arg.CategoryID,
		arg.Amount,
		arg.EndDate,
	)
	return err
}
