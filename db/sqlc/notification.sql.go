// Code generated by sqlc. DO NOT EDIT.
// source: notification.sql

package db

import (
	"context"
	"database/sql"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
  user_id, description, type, priority
) VALUES (
  $1, $2, $3, $4
)
RETURNING notification_id, user_id, description, type, priority, read, created_at
`

type CreateNotificationParams struct {
	UserID      int32                `json:"user_id"`
	Description sql.NullString       `json:"description"`
	Type        string               `json:"type"`
	Priority    NotificationPriority `json:"priority"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.UserID,
		arg.Description,
		arg.Type,
		arg.Priority,
	)
	var i Notification
	err := row.Scan(
		&i.NotificationID,
		&i.UserID,
		&i.Description,
		&i.Type,
		&i.Priority,
		&i.Read,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE user_id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, userID)
	return err
}

const getNotifications = `-- name: GetNotifications :many
SELECT notification_id, user_id, description, type, priority, read, created_at FROM notifications
WHERE user_id = $1
`

func (q *Queries) GetNotifications(ctx context.Context, userID int32) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.NotificationID,
			&i.UserID,
			&i.Description,
			&i.Type,
			&i.Priority,
			&i.Read,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotification = `-- name: UpdateNotification :one
UPDATE notifications 
SET read = $2
WHERE notification_id = $1
RETURNING notification_id, user_id, description, type, priority, read, created_at
`

type UpdateNotificationParams struct {
	NotificationID int32        `json:"notification_id"`
	Read           sql.NullBool `json:"read"`
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, updateNotification, arg.NotificationID, arg.Read)
	var i Notification
	err := row.Scan(
		&i.NotificationID,
		&i.UserID,
		&i.Description,
		&i.Type,
		&i.Priority,
		&i.Read,
		&i.CreatedAt,
	)
	return i, err
}
