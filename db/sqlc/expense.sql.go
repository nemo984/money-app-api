// Code generated by sqlc. DO NOT EDIT.
// source: expense.sql

package db

import (
	"context"
	"database/sql"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (
  user_id, category_id, amount, frequency, note
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING expense_id, category_id, amount, created_at, frequency, note, user_id
`

type CreateExpenseParams struct {
	UserID     int32          `json:"user_id"`
	CategoryID int32          `json:"category_id"`
	Amount     string         `json:"amount"`
	Frequency  DateFrequency  `json:"frequency"`
	Note       sql.NullString `json:"note"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense,
		arg.UserID,
		arg.CategoryID,
		arg.Amount,
		arg.Frequency,
		arg.Note,
	)
	var i Expense
	err := row.Scan(
		&i.ExpenseID,
		&i.CategoryID,
		&i.Amount,
		&i.CreatedAt,
		&i.Frequency,
		&i.Note,
		&i.UserID,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses
WHERE user_id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, userID)
	return err
}

const getExpense = `-- name: GetExpense :one
SELECT expense_id, category_id, amount, created_at, frequency, note, user_id FROM expenses
WHERE expense_id = $1
`

func (q *Queries) GetExpense(ctx context.Context, expenseID int32) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpense, expenseID)
	var i Expense
	err := row.Scan(
		&i.ExpenseID,
		&i.CategoryID,
		&i.Amount,
		&i.CreatedAt,
		&i.Frequency,
		&i.Note,
		&i.UserID,
	)
	return i, err
}

const getExpenses = `-- name: GetExpenses :many
SELECT expense_id, category_id, amount, created_at, frequency, note, user_id FROM expenses
WHERE user_id = $1
`

func (q *Queries) GetExpenses(ctx context.Context, userID int32) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpenses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ExpenseID,
			&i.CategoryID,
			&i.Amount,
			&i.CreatedAt,
			&i.Frequency,
			&i.Note,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
