// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nemo984/money-app-api/service (interfaces: Service)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/nemo984/money-app-api/db/sqlc"
	service "github.com/nemo984/money-app-api/service"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateBudget mocks base method.
func (m *MockService) CreateBudget(arg0 context.Context, arg1 db.CreateBudgetParams) (db.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBudget", arg0, arg1)
	ret0, _ := ret[0].(db.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBudget indicates an expected call of CreateBudget.
func (mr *MockServiceMockRecorder) CreateBudget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBudget", reflect.TypeOf((*MockService)(nil).CreateBudget), arg0, arg1)
}

// CreateCategory mocks base method.
func (m *MockService) CreateCategory(arg0 context.Context, arg1 string) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockServiceMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockService)(nil).CreateCategory), arg0, arg1)
}

// CreateExpense mocks base method.
func (m *MockService) CreateExpense(arg0 context.Context, arg1 db.CreateExpenseParams) (db.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", arg0, arg1)
	ret0, _ := ret[0].(db.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockServiceMockRecorder) CreateExpense(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockService)(nil).CreateExpense), arg0, arg1)
}

// CreateIncome mocks base method.
func (m *MockService) CreateIncome(arg0 context.Context, arg1 db.CreateIncomeParams) (db.Income, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncome", arg0, arg1)
	ret0, _ := ret[0].(db.Income)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIncome indicates an expected call of CreateIncome.
func (mr *MockServiceMockRecorder) CreateIncome(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncome", reflect.TypeOf((*MockService)(nil).CreateIncome), arg0, arg1)
}

// CreateIncomeType mocks base method.
func (m *MockService) CreateIncomeType(arg0 context.Context, arg1 string) (db.IncomeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncomeType", arg0, arg1)
	ret0, _ := ret[0].(db.IncomeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIncomeType indicates an expected call of CreateIncomeType.
func (mr *MockServiceMockRecorder) CreateIncomeType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncomeType", reflect.TypeOf((*MockService)(nil).CreateIncomeType), arg0, arg1)
}

// CreateNotification mocks base method.
func (m *MockService) CreateNotification(arg0 context.Context, arg1 db.CreateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", arg0, arg1)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockServiceMockRecorder) CreateNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockService)(nil).CreateNotification), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), arg0, arg1)
}

// DeleteBudget mocks base method.
func (m *MockService) DeleteBudget(arg0 context.Context, arg1, arg2 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBudget", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBudget indicates an expected call of DeleteBudget.
func (mr *MockServiceMockRecorder) DeleteBudget(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBudget", reflect.TypeOf((*MockService)(nil).DeleteBudget), arg0, arg1, arg2)
}

// DeleteCategory mocks base method.
func (m *MockService) DeleteCategory(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockServiceMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockService)(nil).DeleteCategory), arg0, arg1)
}

// DeleteExpense mocks base method.
func (m *MockService) DeleteExpense(arg0 context.Context, arg1, arg2 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpense", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpense indicates an expected call of DeleteExpense.
func (mr *MockServiceMockRecorder) DeleteExpense(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpense", reflect.TypeOf((*MockService)(nil).DeleteExpense), arg0, arg1, arg2)
}

// DeleteIncome mocks base method.
func (m *MockService) DeleteIncome(arg0 context.Context, arg1, arg2 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIncome", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIncome indicates an expected call of DeleteIncome.
func (mr *MockServiceMockRecorder) DeleteIncome(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncome", reflect.TypeOf((*MockService)(nil).DeleteIncome), arg0, arg1, arg2)
}

// DeleteIncomeType mocks base method.
func (m *MockService) DeleteIncomeType(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIncomeType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIncomeType indicates an expected call of DeleteIncomeType.
func (mr *MockServiceMockRecorder) DeleteIncomeType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncomeType", reflect.TypeOf((*MockService)(nil).DeleteIncomeType), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockService) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockServiceMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockService)(nil).DeleteUser), arg0, arg1)
}

// GetBudgets mocks base method.
func (m *MockService) GetBudgets(arg0 context.Context, arg1 int32) ([]db.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgets", arg0, arg1)
	ret0, _ := ret[0].([]db.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgets indicates an expected call of GetBudgets.
func (mr *MockServiceMockRecorder) GetBudgets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgets", reflect.TypeOf((*MockService)(nil).GetBudgets), arg0, arg1)
}

// GetCategories mocks base method.
func (m *MockService) GetCategories(arg0 context.Context) ([]db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", arg0)
	ret0, _ := ret[0].([]db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockServiceMockRecorder) GetCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockService)(nil).GetCategories), arg0)
}

// GetExpenses mocks base method.
func (m *MockService) GetExpenses(arg0 context.Context, arg1 int32) ([]db.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpenses", arg0, arg1)
	ret0, _ := ret[0].([]db.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpenses indicates an expected call of GetExpenses.
func (mr *MockServiceMockRecorder) GetExpenses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpenses", reflect.TypeOf((*MockService)(nil).GetExpenses), arg0, arg1)
}

// GetIncomeTypes mocks base method.
func (m *MockService) GetIncomeTypes(arg0 context.Context) ([]db.IncomeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomeTypes", arg0)
	ret0, _ := ret[0].([]db.IncomeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomeTypes indicates an expected call of GetIncomeTypes.
func (mr *MockServiceMockRecorder) GetIncomeTypes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomeTypes", reflect.TypeOf((*MockService)(nil).GetIncomeTypes), arg0)
}

// GetIncomes mocks base method.
func (m *MockService) GetIncomes(arg0 context.Context, arg1 int32) ([]db.Income, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomes", arg0, arg1)
	ret0, _ := ret[0].([]db.Income)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomes indicates an expected call of GetIncomes.
func (mr *MockServiceMockRecorder) GetIncomes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomes", reflect.TypeOf((*MockService)(nil).GetIncomes), arg0, arg1)
}

// GetNotifications mocks base method.
func (m *MockService) GetNotifications(arg0 context.Context, arg1 int32) ([]db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", arg0, arg1)
	ret0, _ := ret[0].([]db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockServiceMockRecorder) GetNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockService)(nil).GetNotifications), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockService) GetUser(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockServiceMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockService)(nil).GetUser), arg0, arg1)
}

// LoginUser mocks base method.
func (m *MockService) LoginUser(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockServiceMockRecorder) LoginUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockService)(nil).LoginUser), arg0, arg1, arg2)
}

// UpdateNotification mocks base method.
func (m *MockService) UpdateNotification(arg0 context.Context, arg1 int32, arg2 db.UpdateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockServiceMockRecorder) UpdateNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockService)(nil).UpdateNotification), arg0, arg1, arg2)
}

// UpdateNotifications mocks base method.
func (m *MockService) UpdateNotifications(arg0 context.Context, arg1 db.UpdateNotificationsParams) ([]db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotifications", arg0, arg1)
	ret0, _ := ret[0].([]db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotifications indicates an expected call of UpdateNotifications.
func (mr *MockServiceMockRecorder) UpdateNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotifications", reflect.TypeOf((*MockService)(nil).UpdateNotifications), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockService) UpdateUser(arg0 context.Context, arg1 service.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockServiceMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockService)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserPicture mocks base method.
func (m *MockService) UpdateUserPicture(arg0 context.Context, arg1 db.UpdateUserPictureParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPicture", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPicture indicates an expected call of UpdateUserPicture.
func (mr *MockServiceMockRecorder) UpdateUserPicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPicture", reflect.TypeOf((*MockService)(nil).UpdateUserPicture), arg0, arg1)
}

// VerifyToken mocks base method.
func (m *MockService) VerifyToken(arg0 context.Context, arg1 string) (service.JWTClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", arg0, arg1)
	ret0, _ := ret[0].(service.JWTClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockServiceMockRecorder) VerifyToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockService)(nil).VerifyToken), arg0, arg1)
}
